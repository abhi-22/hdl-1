4-bit ALU 
Aim: Write a HDL code to design 4-bit ALU. 
Verilog 
module alu (a, b, code, en, aluout) 
input [3:0] a, b; 
input [2:0] code; 
input en; 
output [7:0] aluout; 
reg [7:0] aluout ; 
wire[7:0] x, y; 
assign x = {4’B0000, a}; 
assign y = {4’B0000, b}; 
always @ (x, y, code, en, a,b) 
begin 
If (en == 1’B1) 
case (code) 
3’d0: aluout = x + y; 
3’d1: aluout = x - y; 
3’d2: aluout = ~x; 
3’d3: aluout = a * b; 
3’d4: aluout = x & y; 
3’d5: aluout = x | y; 
3’d6: aluout = ~(x & y); 
3’d7: aluout = ~(x | y); 
default: aluout = 8’B00000000; 
endcase 
else 
aluout = 8’BZZZZZZZZ; 
end 
endmodule 
TestBench
module tb_alu;
reg[3:0] a,b;
reg[2:0] code;
wire[7:0] aluout;
integer i;
 alu test_unit( a,b, code, aluout );
 initial begin
 a = 3'd4;
 b = 3'd5;
 code = 3'd0;
 for (i=0;i<=7;i=i+1)
 begin
 code = code + 2'd1;
 #10;
 end
 a = 3'd4;
 b = 3'd5;
 end
endmodule
Result